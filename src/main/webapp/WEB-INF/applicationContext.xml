<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:jaxws="http://cxf.apache.org/jaxws"
	   xmlns:cxf="http://cxf.apache.org/core"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://cxf.apache.org/jaxws
    	http://cxf.apache.org/schemas/jaxws.xsd">
    <mvc:annotation-driven/>
	<context:property-placeholder location="classpath*:jdbc.properties" />
	<!--<spring:bean class="org.apache.cxf.bus.spring.Jsr250BeanPostProcessor" />-->
	<!--<bean id="cxf" class="org.apache.cxf.bus.spring.SpringBus" destroy-method="shutdown"/>-->
	<!--<bean id="org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor" class="org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor"/>-->
	<!--<bean id="org.apache.cxf.bus.spring.Jsr250BeanPostProcessor" class="org.apache.cxf.bus.spring.Jsr250BeanPostProcessor"/>-->
	<!--<bean id="org.apache.cxf.bus.spring.BusExtensionPostProcessor" class="org.apache.cxf.bus.spring.BusExtensionPostProcessor"/>-->
	<!--<bean class="org.apache.cxf.jaxws.context.WebServiceContextResourceResolver" id="org.apache.cxf.jaxws.context.WebServiceContextResourceResolver" lazy-init="true">-->
		<!--<constructor-arg ref="cxf"/>-->
	<!--</bean>-->
	<!--<bean class="org.apache.cxf.jaxws.context.WebServiceContextImpl" id="org.apache.cxf.jaxws.context.WebServiceContextImpl" lazy-init="true"/>-->
	<!--<alias name="org.apache.cxf.jaxws.context.WebServiceContextImpl" alias="javax.xml.ws.WebServiceContext"/>-->
	<!--<jaxws:endpoint id="ZHNMS_Service" implementor="com.jec.module.extern.impl.NTNMS_ServiceImpl" address="/ZHNMS_Service"/>-->

	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="html" value="text/html" />
			</map>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- Configure jdbc Template -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.jec" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!--<prop key="hibernate.current_session_context_class">thread</prop>-->
			</props>
		</property>
	</bean>

	<!-- 配置事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置注解实现管理事务（cglib：proxy-target-class="true"） -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<context:annotation-config />
	<context:component-scan base-package="com.jec.module" />
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<tx:annotation-driven transaction-manager="txManager" />
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- the maximum file size in bytes -->
		<property name="maxUploadSize" value="1000000000" />
	</bean>
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/page/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	</bean>

	<!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
		<!--<property name="securityManager" ref="securityManager" />-->
		<!--&lt;!&ndash;<property name="loginUrl" value="${cas.server.url}" />&ndash;&gt;-->
		<!--&lt;!&ndash;<property name="serviceUrl" value="${cas.project.url}${adminPath}/cas" />&ndash;&gt;-->
		<!--&lt;!&ndash;&lt;!&ndash;<property name="loginUrl" value="${adminPath}/login" /> &ndash;&gt;&ndash;&gt;-->

		<!--&lt;!&ndash;<property name="successUrl" value="${adminPath}" />&ndash;&gt;-->
		<!--&lt;!&ndash;&lt;!&ndash;<property name="successUrl" value="/ConnServlet"/> &ndash;&gt;&ndash;&gt;-->
		<!--<property name="filterChainDefinitions">-->
			<!--<value>-->
				<!--# some example chain definitions:-->
				<!--/static/** = anon-->
				<!--# more URL-to-FilterChain definitions here-->
			<!--</value>-->
		<!--</property>-->
	<!--</bean>-->


	<!--&lt;!&ndash; 定义Shiro安全管理配置 &ndash;&gt;-->
	<!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
		<!--<property name="realm" ref="myShiroRealm" />-->
	<!--</bean>-->

	<!--&lt;!&ndash; 保证实现了Shiro内部lifecycle函数的bean执行 &ndash;&gt;-->
	<!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />-->
	<!--&lt;!&ndash; Enable Shiro Annotations for Spring-configured beans.  Only run after &ndash;&gt;-->
	<!--&lt;!&ndash; the lifecycleBeanProcessor has run: &ndash;&gt;-->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->
	<!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
		<!--<property name="securityManager" ref="securityManager"/>-->
	<!--</bean>-->

	<mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>
</beans>